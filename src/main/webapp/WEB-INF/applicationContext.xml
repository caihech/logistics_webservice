<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--以下为MySql数据库-->
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <!--tomcat config-->
    <bean id="tomcatPropertyConfigurer" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations" value="file:${catalina.base}/conf/api_webservice_config.properties"/>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="placeholderPrefix" value="${dataSource."/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="fileEncoding" value="UTF-8"/>
        <property name="location" value="file:${catalina.base}/conf/api_webservice_config.properties"/>
    </bean>

    <!-- system config -->
    <bean id="applicationPropertyConfigurer"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations" value="WEB-INF/application.properties"/>
    </bean>
    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="applicationPropertyConfigurer"/>
    </bean>

    <!--1 配置数据源 mysql -->
    <!-- Hibernate对Jpa的实现 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 【必须】数据库驱动-->
        <property name="driverClassName" value="${dataSource.driverClassName}"/>
        <!-- 【必须】数据库连接地址 -->
        <property name="url" value="${dataSource.url}"/>
        <!-- 【必须】数据库用户名 -->
        <property name="username" value="${dataSource.username}"/>
        <!-- 【必须】数据库密码 -->
        <property name="password" value="${dataSource.password}"/>
        <!-- 可选 启动时创建的连接数 -->
        <property name="initialSize" value="5"/>
        <!-- 可选 同时可从池中分配的最多连接数，0无限制 -->
        <property name="maxActive" value="10"/>
        <!-- 可选 池中不会被释放的最多空闲连接数 0无限制 -->
        <property name="maxIdle" value="0"/>
        <!-- 可选 同时能从语句池中分配的预处理语句最大值，0无限制 -->
        <property name="maxOpenPreparedStatements" value="100"/>
        <!-- 可选 抛异常前池等待连接回收最大时间（当无可用连接），-1无限等待 -->
        <property name="maxWait" value="1000"/>
        <!-- 可选 连接在池中保持空闲而不被回收的最大时间 -->
        <property name="minEvictableIdleTimeMillis" value="2000"/>
        <!-- 可选 不创建新连接情况下池中保持空闲的最小连接数 -->
        <property name="minIdle" value="2"/>
        <!-- 可选 布尔值，是否对预处理语句进行池管理 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="validationQuery" value="SELECT 1"/>
    </bean>

    <!--2 配置 EntityManagerFactory Jpa配置
    LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
        <!-- 指定Entity实体类包路径 -->
        <property name="packagesToScan" value="com.api.webservice.dao"/>

        <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
        <!--此属性用来负责是否由jpa生成数据库-->
        <!--validate 加载hibernate时，验证创建数据库表结构-->
        <!--create 每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。-->
        <!--create-drop 加载hibernate时创建，退出是删除表结构-->
        <!--update 加载hibernate自动更新数据库结构-->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
                <prop key="hibernate.dialect.storage_engine">innodb</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <!--输出SQL语句-->
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.max_fetch_depth">2</prop>
            </props>
        </property>
    </bean>

    <!--3 配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--4 配置支持注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!--5 配置SpringData -->
    <jpa:repositories base-package="com.api.webservice.dao.repository"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"/>

    <context:component-scan base-package="com.api.webservice"/>

    <!-- todo 不懂干嘛的 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    <bean id="objectMapper" class="com.api.webservice.config.HibernateAwareObjectMapper"/>


    <context:annotation-config/>
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.api.webservice.config.HibernateAwareObjectMapper"/>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

</beans>